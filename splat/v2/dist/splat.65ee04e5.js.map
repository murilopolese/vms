{"version":3,"sources":["splat.js"],"names":["format_matrix","ruleArray","formatted","offsetX","offsetY","length","y","x","hasLowerCase","str","test","Rule","when","then","symmetry","chosenSymetry","rotateArray","a","n","i","j","temp","cloneArray","b","match","grid","element","votes","givenMatch","parseInt","Math","random","_y","_x","symbol","value","name","empty","undefined","toUpperCase","voteCounts","Object","values","voteMatch","indexOf","apply","elements","Element","rules","clearGrid","GRID_HEIGHT","GRID_WIDTH","push","c","String","fromCharCode","module","exports"],"mappings":"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","file":"splat.65ee04e5.js","sourceRoot":"..","sourcesContent":["function format_matrix(ruleArray) {\n  const formatted = [\n    ['.', '.', '.'],\n    ['.', '.', '.'],\n    ['.', '.', '.']\n  ]\n  let offsetX = 0\n  let offsetY = 0\n  if (ruleArray.length < 3) {\n    offsetY = 1\n  }\n  if (ruleArray[0].length < 3) {\n    offsetX = 1\n  }\n\n  for (let y = 0; y < ruleArray.length; y++) {\n    for (let x = 0; x < ruleArray[y].length; x++) {\n      formatted[y+offsetY][x+offsetX] = ruleArray[y][x]\n    }\n  }\n\n  return formatted\n}\n\nfunction hasLowerCase(str) {\n    return (/[a-z]/.test(str));\n}\n\nfunction Rule({ when = [[]], then = [[]], symmetry = 0 }) {\n  this.when = format_matrix(when)\n  this.then = format_matrix(then)\n  this.symmetry = symmetry\n  this.chosenSymetry = 0\n  this.when[1][1] = '@'\n\n  // https://disigns.wordpress.com/2017/12/22/rotating-a-2d-array-by-90-degrees-java/\n  this.rotateArray = function(a, n){\n    for (let i = 0; i < n-1; i++) {\n      for (let j = i; j < n-1-i; j++) {\n        let temp = a[i][j]\n        a[i][j] = a[n-1-j][i]\n        a[n-1-j][i] = a[n-1-i][n-1-j]\n        a[n-1-i][n-1-j] = a[j][n-1-i]\n        a[j][n-1-i] = temp\n      }\n    }\n    return a\n  }\n\n  this.cloneArray = function(a) {\n    let b = format_matrix(a)\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        a[i][j] = a[i][j]\n      }\n    }\n    return b\n  }\n\n  this.match = function(grid, x, y) {\n    let element = grid[y][x]\n    let votes = {}\n    // console.log('will try to match rule', this.when)\n    let givenMatch = true\n    this.chosenSymetry = parseInt(Math.random()*(this.symmetry+1))\n    let when = this.cloneArray(this.when)\n    for (let i = 0; i < this.chosenSymetry; i++) {\n      when = this.rotateArray(when, 3)\n    }\n\n    for (let _y = 0; _y < 3; _y++) {\n      for (let _x = 0; _x < 3; _x++) {\n        let symbol = when[_y][_x]\n        let value = grid[y+_y-1][x+_x-1]\n        switch (symbol) {\n          case '@':\n            if (value.name !== element.name) {\n              givenMatch = false\n            }\n            break\n          case '?':\n            if (value.name === empty.name) {\n              givenMatch = false\n            }\n            break\n          case '_':\n            if (value.name !== empty.name) {\n              givenMatch = false\n            }\n            break\n          case null:\n            // Do nothing\n          case '.':\n            // it could be anything here\n            break\n          default:\n            // Check if it's a vote or a given\n            if (hasLowerCase(symbol)) {\n              if (votes[symbol] === undefined) {\n                votes[symbol] = 0\n              }\n              if (value.name[0] === symbol.toUpperCase()) {\n                votes[symbol] += 1\n              }\n            } else {\n              if (value.name[0] !== symbol) {\n                givenMatch = false\n              }\n            }\n        }\n      }\n    }\n    let voteCounts = Object.values(votes)\n    voteMatch = voteCounts.length == 0 || voteCounts.indexOf(0) === -1\n    return givenMatch && voteMatch\n  }\n\n  this.apply = function(grid, x, y) {\n    let element = grid[y][x]\n    // console.log('applying rule', this.then)\n    let then = this.cloneArray(this.then)\n    for (let i = 0; i < this.chosenSymetry; i++) {\n      then = this.rotateArray(then, 3)\n    }\n    for (let _y = 0; _y < 3; _y++) {\n      for (let _x = 0; _x < 3; _x++) {\n        let symbol = then[_y][_x]\n        switch (symbol) {\n          case '@':\n            grid[y+_y-1][x+_x-1] = elements[element.name]\n            break\n          case '.':\n          case '?':\n          case null:\n            // Do nothing\n            break\n          case '_':\n              grid[y+_y-1][x+_x-1] = empty\n            break;\n          default:\n            grid[y+_y-1][x+_x-1] = elements[symbol.toUpperCase()]\n        }\n      }\n    }\n    return grid\n  }\n}\n\nfunction Element({ name = '_', rules = [] }) {\n  this.name = name\n  this.rules = rules\n}\n\nfunction clearGrid(grid) {\n  if (!grid) grid = []\n  for (let y = 0; y < GRID_HEIGHT; y++) {\n    grid[y] = []\n    for (let x = 0; x < GRID_WIDTH; x++) {\n      grid[y].push(empty)\n    }\n  }\n  return grid\n}\n\nlet empty = new Element({ name: '_'})\nlet elements = {\n  '_': empty\n}\nfor (let i = 65; i < 91; i++) {\n  let c = String.fromCharCode(i)\n  elements[c] = new Element({ name: `${c}` })\n}\n\nconst GRID_WIDTH = 30\nconst GRID_HEIGHT = 30\nlet grid = clearGrid()\n\nmodule.exports = {\n  GRID_WIDTH,\n  GRID_HEIGHT,\n  Rule: Rule,\n  Element: Element,\n  grid: grid,\n  elements: elements,\n  clearGrid: clearGrid\n}\n"]}